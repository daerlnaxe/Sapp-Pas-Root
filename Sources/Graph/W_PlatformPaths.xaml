<Window x:Class="SPR.Graph.W_PlatformPaths"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SPR.Graph"
        xmlns:conv="clr-namespace:SPR.Graph.Converters"
        xmlns:comm="clr-namespace:SPR.Graph.Commands"
        xmlns:behav="clr-namespace:SPR.Graph.Behaviors"
        xmlns:rule="clr-namespace:SPR.Graph.Rules"
        xmlns:be="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:t="clr-namespace:SPR.Languages"
        mc:Ignorable="d"
        Title="W_EditPlatform"
        Height="640" Width="800" MinHeight="600" MinWidth="800"
        Loaded="Window_Loaded" Closing="Window_Closing">
    <Window.CommandBindings>
        <CommandBinding Command="comm:ComCommands.Browse" CanExecute="CommandBrowse_CanExecute" Executed="CommandBrowse_Executed"/>
        <CommandBinding Command="local:W_PlatformPaths.ResetFactory" CanExecute="CommandResetFac_CanExecute" Executed="CommandResetFac_Executed" />
        <CommandBinding Command="comm:ComCommands.Simulate" CanExecute="CommandSimulate_CanExecute" Executed="CommandSimulate_Executed" />
        <CommandBinding Command="comm:ComCommands.Stop" CanExecute="CommandStop_CanExecute" Executed="CommandStop_Executed" />
        <CommandBinding Command="comm:ComCommands.Apply" CanExecute="CommandApply_CanExecute" Executed="CommandApply_Executed" />
    </Window.CommandBindings>
    <Window.Resources>
        <!-- Validation error template -->
        <ControlTemplate x:Key="ValidationErrorTemplate" >
            <DockPanel LastChildFill="true" >
                <Border  Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                        >
                    <!-- 
                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                    
                    -->
                    <Border.Style >
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <Trigger Property="Validation.HasError" Value="False">
                                    <Setter Property="ToolTip" Value="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <!--            
                    -->
                    <!-- 
                    <Border.ToolTip>
                        <ItemsControl ItemsSource="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0]}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding }"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border.ToolTip>
                    -->
                    <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
                    </TextBlock>
                </Border>
                <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
                    <Border BorderBrush="red" BorderThickness="1" />
                </AdornedElementPlaceholder>
            </DockPanel>
        </ControlTemplate>
        <!-- Style -->
        <!--
        <Style TargetType="{x:Type TextBox}" >
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0,2,40,2" />
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="true">
                            <Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                                <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
                                </TextBlock>
                            </Border>
                            <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
                                <Border BorderBrush="red" BorderThickness="1" />
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
            -->
        <!-- Style des boutons simulate, apply, reset-->
        <Style TargetType="Button" x:Key="CollapseStyle">
            <Setter Property="Margin" Value="3,0,3,0"/>
            <Setter Property="Padding" Value="10,3,10,3"/>
            <Setter Property="Visibility" Value="Visible"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Label" x:Key="format">
            <Setter Property="ContentStringFormat" Value="{}{0}:"/>
        </Style>
        <!--
        -->
        <conv:RadioBoolToIntConverter x:Key="radioBoolToIntConverter" />
    </Window.Resources>
    <DockPanel Margin="10">
        <DockPanel.Resources>
            <Style TargetType="Button">
                <Setter Property="Margin" Value="3,0,3,0"/>
                <Setter Property="Padding" Value="10,3,10,3"/>
            </Style>
        </DockPanel.Resources>
        <!-- Menu -->
        <Grid DockPanel.Dock="Top" DockPanel.ZIndex="1000">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="31*" MinWidth="100"/>
                <ColumnDefinition Width="38*" MinWidth="10"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <!-- Plateforme -->
            <StackPanel Grid.Row="0" Grid.ColumnSpan="2" Orientation="Horizontal" Width="auto" HorizontalAlignment="Left">
                <Label HorizontalAlignment="Left"
                    Content="{x:Static t:SPRLang.Platform}" ContentStringFormat="{}{0}:"/>
                <Label Content="{Binding PlatformObject.Name}" Grid.Column="1"/>
            </StackPanel>
            <!-- Left Menu -->
            <!-- Données interprétées -->
            <Grid Grid.Row="1" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition/>
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Grid.ColumnSpan="2" HorizontalAlignment="Center" 
                    Content="{x:Static t:SPRLang.Interpreted_Current_Main_Path}" ContentStringFormat="{}{0}:" />
                <Expander Grid.Column="2" VerticalAlignment="Center" ExpandDirection="Right" Panel.ZIndex="500">
                    <Canvas >
                        <Grid >
                            <Grid.Resources>
                                <Style TargetType="RadioButton">
                                    <Setter Property="Margin" Value="5"/>
                                </Style>
                            </Grid.Resources>
                            <Grid.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF6AB3D4" Offset="1"/>
                                    <GradientStop Color="#FF3E6081" Offset="0.38"/>
                                </LinearGradientBrush>
                            </Grid.Background>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Label Content="Mode"/>
                            <!--
                        -->
                            <RadioButton GroupName="MainPathMode" Grid.Row="0" Grid.Column="1" 
                                     IsChecked="{Binding Separator, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource radioBoolToIntConverter}, ConverterParameter=1}" 
                                     Checked="RadioButton_Checked" >\</RadioButton>
                            <RadioButton GroupName="MainPathMode" Grid.Row="0" Grid.Column="2"
                                     IsChecked="{Binding Separator, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource radioBoolToIntConverter}, ConverterParameter=2}" 
                                     Checked="RadioButton_Checked" >/</RadioButton>
                        </Grid>
                    </Canvas>
                </Expander>
                <!-- Chemin hard courant -->
                <Label Content="{x:Static t:SPRLang.Hard_Path}" ContentStringFormat="{}{0}:" Grid.Row="3"/>
                <Label Content="{Binding CHardLink}" Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="3" />
                <!-- Chemin relatif courant -->
                <Label Content="{x:Static t:SPRLang.Relative_Path}" ContentStringFormat="{}{0}:" Grid.Row="4" Grid.ColumnSpan="2"/>
                <Label Content="{Binding CRelatLink}" Grid.Row="4" Grid.Column="1" Grid.ColumnSpan="2"/>
            </Grid>

            <!-- Choose a new folder -->
            <Grid Grid.Row="2" Grid.ColumnSpan="2" Height="auto">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="97*" MinWidth="150"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Label Margin="0,10,0,10"
                    Content="{x:Static t:SPRLang.Destination_Folder}" ContentStringFormat="{}{0}:"  
                    ToolTip="{x:Static t:SPRLang.TT_SelectFolder}"/>
                <!-- Vérifie que le chemin ne soit pas null dynamiquement -->
                <!-- On peut le valider à l'enter ? -->
                <TextBox x:Name="chosenBox" Grid.Column="1" VerticalAlignment="Stretch" Margin="10" 
                         IsUndoEnabled="True" Padding="3"
                         KeyUp="TBChosenFolder_KeyUp"
                         Text="{Binding Path=ChosenFolder, UpdateSourceTrigger=Explicit}"
                         Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}" 
                         IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                         />
                <!--  
                 
                    NotifyOnValidationError=True, 
                    ValidatesOnNotifyDataErrors=True,
                    NotifyOnSourceUpdated=True,
                    NotifyOnTargetUpdated=True,                    


                
                         Text="{Binding ChosenFolder, Mode=TwoWay, ValidatesOnDataErrors=True, NotifyOnValidationError=True}" 
                -->

            </Grid>
            <StackPanel Grid.Column="2" Grid.Row="4" Grid.ColumnSpan="2" Orientation="Horizontal" Margin="0,10,10,10" >
                <!-- Bouton Browse -->

                <Button Content="{x:Static t:SPRLang.Browse}"
                        Command="comm:ComCommands.Browse"
                        />
                <!--
                                    IsEnabled="{Binding IsBrowseVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                -->
                <!-- Bouton Simulate -->
                <Button x:Name="btSimul"
                        Content="{x:Static t:SPRLang.Simulate}" Command="comm:ComCommands.Simulate"
                        Style="{StaticResource CollapseStyle}"                
                    />
                <!-- 
                -->
                <Button Content="Reset" Style="{StaticResource CollapseStyle}" IsEnabled="False"/>
                <!-- Doivent apparaitre quand la simulation est ok -->
                <!-- Bouton Apply -->
                <Button Content="{x:Static t:SPRLang.Apply}" 
                        Style="{StaticResource CollapseStyle}"
                        Command="comm:ComCommands.Apply"/>

                <!-- Stop -->
                <Button Style="{StaticResource CollapseStyle}"
                        Content="Stop" Command="comm:ComCommands.Stop"/>
            </StackPanel>
            <!-- Center -->
            <!-- Prend en compte le folders + le system folder name -->
            <Grid Grid.Column="3" Grid.RowSpan="2" Panel.ZIndex="5000">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <Label Content="{x:Static t:SPRLang.Platform_Folder_Name}" ContentStringFormat="{}{0}:"
                       ToolTip="{x:Static t:SPRLang.TT_PlaformFolder}"/>
                <!--
                -->


                <TextBox Grid.Column="1" Padding="3" 
                    IsUndoEnabled="True"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  Width="100"
                    Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}"
                    Text="{Binding SystemFolderName, ValidatesOnNotifyDataErrors=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged}"
                    IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                         />
                <!--
                         behav:TextBoxBehav.IsFolderInput="True"
                    -->

                <!--
                         Text="{Binding SystemFolderName}"
                    -->

                <!--
                         CommandManager.PreviewCanExecute="HandleCanExecute"
                         KeyUp="SFN_KeyUp"
                         PreviewTextInput="Folder_Format"
                        <Style TargetType="TextBox">
                            <Setter Property="BorderBrush" Value="Gray"/>
                            <Style.Triggers>
                                <Trigger Property="Text" Value="">
                                    <Setter Property="BorderBrush" Value="Red"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                    <TextBox.Style>
                    <be:Interaction.Behaviors>
                    </be:Interaction.Behaviors>
                    -->
                <Canvas  Grid.Row="1" Grid.Column="3" Panel.ZIndex="5000">
                    <StackPanel Canvas.Right="10" Canvas.Top="10" Orientation="Horizontal"  >
                        <Expander ExpandDirection="Left" HorizontalAlignment="Right" VerticalAlignment="Top" >
                            <Border BorderThickness="1">
                                <Border.BorderBrush>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#FFFDFDFD"/>
                                        <GradientStop Color="#FF00B9FF" Offset="10"/>
                                    </RadialGradientBrush>
                                </Border.BorderBrush>
                                <Grid >
                                    <Grid.Resources>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Width" Value="100"/>
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Margin" Value="3"/>
                                            <Setter Property="IsUndoEnabled" Value="True"/>
                                            <!--
                                            <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}"/>
                                            -->
                                        </Style>
                                    </Grid.Resources>
                                    <Grid.Background>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FF6AB3D4" Offset="1"/>
                                            <GradientStop Color="#FF3E6081" Offset="0.38"/>
                                        </LinearGradientBrush>
                                    </Grid.Background>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Label Content="{x:Static t:SPRLang.Name_of_Folders}" Grid.ColumnSpan="2" HorizontalAlignment="Center" FontWeight="Bold" Foreground="#FFF5F3F3"/>
                                    <!-- Cheatcodes -->
                                    <Label Grid.Row="1" Grid.Column="0">
                                        <Label.Content >
                                            <TextBlock Text="Cheatss Folder:" TextDecorations="Strikethrough"/>
                                        </Label.Content>
                                    </Label>
                                    <TextBox Grid.Row="1" IsEnabled="False"/>
                                    <!-- Games Folder -->
                                    <Label Content="{x:Static t:SPRLang.Game_Folder}" ContentStringFormat="{}{0}:" Grid.Row="2" Grid.Column="0"/>
                                    <TextBox Grid.Row="2"
                                         Text="{Binding GamesFName
                                         , UpdateSourceTrigger=PropertyChanged}"
                                         Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}"                                         
                                         IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                             />
                                    <!--
                                         behav:TextBoxBehav.IsFolderInput="True"
                                    -->
                                    <!-- Manuals Folder -->
                                    <Label Content="{x:Static t:SPRLang.Manual_Folder}"  ContentStringFormat="{}{0}:" Grid.Row="3"/>
                                    <TextBox Grid.Row="3"
                                        Text="{Binding ManualsFName,                                                                              
                                        UpdateSourceTrigger=PropertyChanged}"
                                        Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}"
                                        IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                        />
                                    <!-- 
                                    Apparemment ça sert plus à rien, en tout cas property changed semble suffire
                                        ValidatesOnDataErrors=True,
                                        ValidatesOnExceptions=True,
                                        ValidatesOnNotifyDataErrors=True,
                                        NotifyOnValidationError=True,
                                        NotifyOnTargetUpdated=True,
                                        NotifyOnSourceUpdated=True,
 -->
                                    <!-- Images Folder -->
                                    <Label Content="{x:Static t:SPRLang.Images_Folder}"  ContentStringFormat="{}{0}:" Grid.Row="4"/>
                                    <TextBox Grid.Row="4"
                                        Text="{Binding ImagesFName, UpdateSourceTrigger=PropertyChanged}"
                                        Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}"
                                        IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                         />

                                    <!-- Musics Folder -->
                                    <Label Content="{x:Static t:SPRLang.Musics_Folder}"  ContentStringFormat="{}{0}:" Grid.Row="5"/>
                                    <TextBox Grid.Row="5"
                                        Text="{Binding MusicsFName, UpdateSourceTrigger=PropertyChanged}"
                                        Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}"
                                        IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                             />
                                    <!-- Videos Folder -->
                                    <Label Content="{x:Static t:SPRLang.Videos_Folder}" ContentStringFormat="{}{0}:" Grid.Row="6"/>
                                    <TextBox Grid.Row="6"
                                        Text="{Binding VideosFName, ValidatesOnNotifyDataErrors=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged}"
                                        Validation.ErrorTemplate="{StaticResource ResourceKey=ValidationErrorTemplate}"
                                        IsEnabled="{Binding ActiveBox, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                             />
                                </Grid>

                            </Border>

                        </Expander>
                        <Label Content="{x:Static t:SPRLang.Folders}"  ContentStringFormat="{}{0}..." />
                    </StackPanel>
                </Canvas>

            </Grid>

            <!-- More ... -->
            <!-- Master Root-->

            <!-- Right Menu -->
            <StackPanel Grid.Row="2" Grid.Column="4" Margin="10,10,10,10">
            </StackPanel>
            <Button Grid.Row="2" Grid.Column="4" Content="{x:Static t:SPRLang.Reset_Factory}" HorizontalAlignment="Center" VerticalAlignment="Center" 
                        Command="local:W_PlatformPaths.ResetFactory"
                        />
        </Grid>
        <!-- Log -->
        <!-- ValidatesOnNotifyDataErrors est utile car sans ça on affiche rouge quand on rectifie les erreurs -->
        <TextBox Text="{Binding Mev.Log, ValidatesOnNotifyDataErrors=False}" Height="54" DockPanel.Dock="Bottom"
                 Grid.ZIndex="1" Margin="15,3,15,3" AcceptsReturn="True"                 
                 />

        <!-- Eléments -->
        <ScrollViewer Margin="15,0,15,3">

            <ItemsControl  ItemsSource="{Binding PlatformPaths}" >
                <ItemsControl.ItemTemplate >
                    <DataTemplate>
                        <!--
                            -->
                        <local:PlatformControl Margin="3" 
                            Categorie="{Binding Type}"
                            SizeCateg="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.SizeCateg}"
                            OHardLink="{Binding HardPath}"     
                            ORelatLink="{Binding RelatPath}"
                            NHardLink="{Binding NewHardPath}"
                            NRelatLink="{Binding NewRelatPath}"
                                />
                        <!--
                                              SizeCateg="100"
                            -->
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
    </DockPanel>
</Window>
